package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"graphblog/graph/model"
)

// CreateArticle is the resolver for the createArticle field.
func (r *mutationResolver) CreateArticle(ctx context.Context, input model.NewArticle) (*model.Article, error) {
	incept := model.Article{
		Title:   input.Title,
		Content: input.Content,
		Status:  input.Status,
		User: &model.User{
			ID: input.UserID,
		},
	}

	saved, err := r.articleSvc.Create(incept)
	if err != nil {
		r.log.Error(err)
		return nil, err
	}

	return &saved, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	incept := model.User{
		Name: input.Name,
	}

	saved, err := r.userSvc.Create(incept)
	if err != nil {
		r.log.Error(err)
		return nil, err
	}

	return &saved, nil
}

// Articles is the resolver for the articles field.
func (r *queryResolver) Articles(ctx context.Context) ([]*model.Article, error) {
	records, err := r.articleSvc.GetAll()
	if err != nil {
		r.log.Error(err)
		return nil, err
	}
	return records, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	records, err := r.userSvc.GetAll()
	if err != nil {
		r.log.Error(err)
		return nil, err
	}

	return records, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
